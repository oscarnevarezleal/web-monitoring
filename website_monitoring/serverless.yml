# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: website-monitoring
app: website-monitoring
#tenant: your-tenant-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs10.x

  # you can overwrite defaults here
  stage: dev
  region: us-east-1
  role: myDefaultRole

custom:
  region: ${opt:region, self:provider.region}

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  monitorFunction:
    handler: handler.monitor
    role: myDefaultRole
    #    The following are a few example events you can configure
    #    NOTE: Please make sure to change your handler code to work with those events
    #    Check the event documentation for details
    events:
      #      - http:
      #          path: users/create
      #          method: get
      #      - websocket: $connect
      #      - s3: ${env:BUCKET}
      #      - schedule: rate(10 minutes)
      - schedule:
          name: monitor-scheduled-rate-event
          description: 'monitor scheduler running every 5 minutes'
          rate: rate(5 minutes)
          enabled: true
          input:
            SES_EMAIL: consulting@onevarez.com
            SQS_ARN: !Ref firstQueue
            SNS_URI: !Ref monitoringSnsTopic
            S3_ASSETS_BUCKET_ARN: !GetAtt MonitoringAssetsBucket.Arn
            CLOUDFRONT_DISTRIBUTION_DOMAIN: !GetAtt [CloudFrontDistribution, DomainName]
            S3_ASSETS_BUCKET_NAME: !Ref MonitoringAssetsBucket
            stageParams:
              stage: dev
      #      - sns: greeter-topic
      #      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
      #      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
      #      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
      #      - iot:
      #          sql: "SELECT * FROM 'some_topic'"
      #      - cloudwatchEvent:
      #          event:
      #            source:
      #              - "aws.ec2"
      #            detail-type:
      #              - "EC2 Instance State-change Notification"
      #            detail:
      #              state:
      #                - pending
      # - cloudwatchLog: '/aws/lambda/website-monitoring'
    #      - cognitoUserPool:
    #          pool: MyUserPool
    #          trigger: PreSignUp
    #      - alb:
    #          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
    #          priority: 1
    #          conditions:
    #            host: example.com
    #            path: /hello

    #    Define function environment variables here
    environment:
      SES_EMAIL: consulting@onevarez.com
      SQS_ARN: !Ref firstQueue
      SNS_URI: !Ref monitoringSnsTopic
      S3_ASSETS_BUCKET_ARN: !GetAtt MonitoringAssetsBucket.Arn
      CLOUDFRONT_DISTRIBUTION_DOMAIN: !GetAtt [CloudFrontDistribution, DomainName]
      S3_ASSETS_BUCKET_NAME: !Ref MonitoringAssetsBucket

# you can add CloudFormation resource templates here
resources:
  Resources:

    myDefaultRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /my/default/path/
        RoleName: MyDefaultRole # required if you want to use 'serverless deploy --function' later on
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        # note that these rights are needed if you want your function to be able to communicate with resources within your vpc
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        Policies:
          - PolicyName: myPolicyName
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow # note that these rights are given in the default policy and are required if you want logs out of your lambda(s)
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                        - ':'
                        - - 'arn:aws:logs'
                          - Ref: 'AWS::Region'
                          - Ref: 'AWS::AccountId'
                          - 'log-group:/aws/lambda/*:*:*'
                - Effect: "Allow"
                  Action:
                    - "s3:PutObject"
                  Resource:
                    Fn::Join:
                      - ""
                      - - "arn:aws:s3:::"
                        - "Ref": "MonitoringAssetsBucket"

    MonitoringAssetsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:service}-${self:provider.stage}-monitoring-assets
        AccessControl: PublicRead
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: 404.html
    MonitoringAssetsBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref 'MonitoringAssetsBucket'
        PolicyDocument:
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: s3:GetObject
              Resource: !Join ['', ['arn:aws:s3:::', !Ref 'MonitoringAssetsBucket', /*]]
    CloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Origins:
            - DomainName: !Select [2, !Split ["/", !GetAtt MonitoringAssetsBucket.WebsiteURL]]
              Id: myS3Origin
              CustomOriginConfig:
                HTTPPort: '80'
                HTTPSPort: '443'
                OriginProtocolPolicy: http-only
#              S3OriginConfig:
#                OriginAccessIdentity: origin-access-identity/cloudfront/E127EXAMPLE51Z
          Enabled: 'true'
          Comment: Web monitoring status page distribution
          DefaultRootObject: index.html
#          Logging:
#            IncludeCookies: 'false'
#            Bucket: mylogs.s3.amazonaws.com
#            Prefix: myprefix
#          Aliases:
#            - mysite.example.com
#            - yoursite.example.com
          DefaultCacheBehavior:
            AllowedMethods:
              - DELETE
              - GET
              - HEAD
              - OPTIONS
              - PATCH
              - POST
              - PUT
            TargetOriginId: myS3Origin
            ForwardedValues:
              QueryString: 'false'
              Cookies:
                Forward: none
#            TrustedSigners:
#              - 1234567890EX
#              - 1234567891EX
            ViewerProtocolPolicy: allow-all
          PriceClass: PriceClass_200
#          Restrictions:
#            GeoRestriction:
#              RestrictionType: whitelist
#              Locations:
#                - AQ
#                - CV
          ViewerCertificate:
            CloudFrontDefaultCertificate: 'true'

    ### PART ONE: Create SNS Topic and SQS Queues

    # Create our SNS Topic
    monitoringSnsTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:service}-${self:provider.stage}-monitoring-sns-topic

    # Create our 'firstQueue' SQS queue
    firstQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: ${self:service}-${self:provider.stage}-first-queue
        RedrivePolicy:
          deadLetterTargetArn: !GetAtt
            - firstQueueDLQ
            - Arn
          maxReceiveCount: 3

    # Create our 'firstQueue' Dead Letter Queue SQS queue
    firstQueueDLQ:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-${self:provider.stage}-first-queue-dlq

    ### PART TWO: Create SQS Queue Policies

    # Create our queue policy for the 'firstQueue'
    snsToFirstQueueSqsPolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Sid: "allow-sns-messages"
              Effect: Allow
              Principal: "*"
              Resource: !GetAtt
                - firstQueue
                - Arn
              Action: "SQS:SendMessage"
              Condition:
                ArnEquals:
                  "aws:SourceArn": !Ref monitoringSnsTopic
        Queues:
          - Ref: firstQueue

    ### PART THREE: Subscribe our SQS Queues to our SNS Topic

    EmailSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint: consulting@onevarez.com
        Protocol: email
        TopicArn: !Ref 'monitoringSnsTopic'

    # Create the subscription to the 'firstQueue'
    firstQueueSubscription:
      Type: 'AWS::SNS::Subscription'
      Properties:
        TopicArn: !Ref 'monitoringSnsTopic'
        Endpoint: !GetAtt
          - firstQueue
          - Arn
        Protocol: sqs
        RawMessageDelivery: 'true'
  Outputs:
    MonitoringAssetsBucket:
      Value: !GetAtt MonitoringAssetsBucket.Arn
      Description: 'S3 buckets where monitoring results are stored'
      Export:
        Name: MonitoringAssetsBucket
    CloudFrontDistribution:
      Value: !GetAtt [CloudFrontDistribution, DomainName]
      Description: 'Cloudfront distribution. It serves from S3 bucket '
      Export:
        Name: CloudFrontDistribution
    MonitorFunctionLambdaFunctionQualifiedArn:
      Export:
        Name: a